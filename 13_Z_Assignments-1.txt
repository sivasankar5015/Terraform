 Create Ghost module
Create a directory called ghost.
Your modules will be made up of three files: main.tf, variables.tf and outputs.tf.

main.tf
In main.tf you will deploy out two resources docker_image and docker_container. The docker_image resource name will be ghost_image.
The name will use th image_name variable.
The docker_container resource name will be ghost_container.
The name will be set using a varialbe called container_name. The image will be set usingdocker_image.ghost_image.latest. Set the external port to use the ext_port variable.

variables.tf
In variables.tf create three varialbes: image_name, container_name and ext_port.

outputs.tf
In outputs.tf create two outputs: ip and container_name. The ip output the ghost_container's ip_address attribute.
The container_name output the ghost_container's name attribute.

Create root module
main.tf
In cloud_user directory create main.tf, variables.tf and outputs.tf. In main.tf will use the ghost module.
Set image_name using a variable called image_name.
Set container_name using a variable called container_name.
Set ext_port using a variable called ext_port.
In variables.tf create three image_name, container_name and ext_port.

variables.tf
The image_name will have a default value of ghost:latest with a description of Image for container.
The container_name will have a default value of blogwith a description ofName of the container.  
Theext_portwill have adefaultvalue of 80 with a description of External port for container.

outputs.tf
In outputs.tf create two outputs: ip and container_name. The ip output the ghost_container's ip_address attribute.
The container_name output the ghost_container's name attribute.

Deploy the infrastructure
Initialize Terraform.
Generate a Terraform plan and output a plan file.
Deploy the infrastructure using the plan file.

------------------------------------------------------------------------------------

1. Create a ghost module

 mkdir ghost
[ec2-user@ip-172-31-91-83 terraform]$ ls
ghost

[ec2-user@ip-172-31-91-83 ghost]$ touch main.tf variables.tf outputs.tf
[ec2-user@ip-172-31-91-83 ghost]$ ls
main.tf  outputs.tf  variables.tf

[ec2-user@ip-172-31-91-83 ghost]$ cat outputs.tf
output "container_name" {
  value = "${docker_container.ghost_container.name}"
}
output "container_ip" {
  value = "${docker_container.ghost_container.ip_address}"
}

[ec2-user@ip-172-31-91-83 ghost]$ cat variables.tf
variable "image_name" {
  description = "Name of the image"
  default = "ghost:latest"
}
variable "container_name" {
  description = "Name of the container"
  default = "ghost_blog"
}
variable "ext_port" {
  default = "80"
}


[ec2-user@ip-172-31-91-83 ghost]$ cat main.tf
resource "docker_image" "ghost_image" {
  name = "${var.image_name}"
}
resource "docker_container" "ghost_container" {
  name = "${var.container_name}"
  image = "${docker_image.ghost_image.latest}"
  ports {
    external = "${var.ext_port}"
    internal = "2368"

  }

[ec2-user@ip-172-31-91-83 ghost]$ terraform init

Terraform has been successfully initialized!
[ec2-user@ip-172-31-91-83 ghost]$ terraform validate
Success! The configuration is valid.

[ec2-user@ip-172-31-91-83 ghost]$ terraform plan -out=tfplan

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.ghost_container will be created
  + resource "docker_container" "ghost_container" {
      + attach           = false
      + bridge           = (known after apply)
      + container_logs   = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + id               = (known after apply)
      + image            = (known after apply)
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "ghost_blog"
      + network_data     = (known after apply)
      + read_only        = false
      + restart          = "no"
      + rm               = false
      + start            = true

      + ports {
          + external = 80
          + internal = 2368
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.ghost_image will be created
  + resource "docker_image" "ghost_image" {
      + id     = (known after apply)
      + latest = (known after apply)
      + name   = "ghost:latest"
    }

Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

[ec2-user@ip-172-31-91-83 ghost]$ terraform apply tfplan
docker_image.ghost_image: Creating...
docker_image.ghost_image: Creation complete after 0s [id=sha256:eadda45eb5e4c4dde5ef2bbb16f7e6754183d4e6fab6025f44fe1c214a5efc6eghost:latest]
docker_container.ghost_container: Creating...
docker_container.ghost_container: Creation complete after 1s [id=a691b5da0196d157da7242450cb8cfc41dc192f30a4b63ef9cd39cc40af1e2f5]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate

Outputs:

container_ip = 172.17.0.4
container_name = ghost_blog

 docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
a691b5da0196        eadda45eb5e4        "docker-entrypoint.s…"   15 minutes ago      Up 15 minutes       0.0.0.0:80->2368/tcp     ghost_blog



2. Create a root module

[ec2-user@ip-172-31-91-83 terraform]$ ls
ghost  main.tf  outputs.tf  variables.tf

cat variables.tf
variable "image_name" {
  description = "Name of the image"
  default = "ghost:latest"
}
variable "container_name" {
  description = "Name of the container"
  default = "blog"
}
variable "ext_port" {
  default = "8099"
}

[ec2-user@ip-172-31-91-83 terraform]$ cat outputs.tf
output "container_name" {
  value = "${module.ghost.container_name}"
}
output "container_ip" {
  value = "${module.ghost.container_ip}"
}

[ec2-user@ip-172-31-91-83 terraform]$ cat main.tf
module "ghost" {
  source = "./ghost"
  image_name = "${var.image_name}"
  container_name = "${var.container_name}"
  ext_port = "${var.ext_port}"
}

[ec2-user@ip-172-31-91-83 terraform]$ terraform init
Initializing modules...

Terraform has been successfully initialized!

[ec2-user@ip-172-31-91-83 terraform]$ terraform plan -out=tfplan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.ghost.docker_container.ghost_container will be created
  + resource "docker_container" "ghost_container" {
      + attach           = false
      + bridge           = (known after apply)
      + container_logs   = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + id               = (known after apply)
      + image            = (known after apply)
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "blog"
      + network_data     = (known after apply)
      + read_only        = false
      + restart          = "no"
      + rm               = false
      + start            = true

      + ports {
          + external = 80
          + internal = 2368
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # module.ghost.docker_image.ghost_image will be created
  + resource "docker_image" "ghost_image" {
      + id     = (known after apply)
      + latest = (known after apply)
      + name   = "ghost:latest"
    }

Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

[ec2-user@ip-172-31-91-83 terraform]$ terraform apply tfplan

module.ghost.docker_container.ghost_container: Creating...
module.ghost.docker_container.ghost_container: Creation complete after 0s [id=27db1da52766323ddd3c4e13b53de417338420faf378ec4fa88e6b093bb2ba0e]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate

Outputs:

container_ip = 172.17.0.5
container_name = blog

[ec2-user@ip-172-31-91-83 terraform]$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
27db1da52766        eadda45eb5e4        "docker-entrypoint.s…"   5 minutes ago       Up 4 minutes        0.0.0.0:8099->2368/tcp   blog







