Creating a Pod
In this video, we will start working with Kubernetes resources by creating a Pod.

Setup your environment:

mkdir -p ~/terraform/pod
cd ~/terraform/pod
vi main.tf:

resource "kubernetes_pod" "ghost_alpine" {
  metadata {
    name = "ghost-alpine"
  }

  spec {
    host_network = "true"
    container {
      image = "ghost:alpine"
      name  = "ghost-alpine"
    }
  }
}
Initialize Terraform:

terraform init
Validate main.tf:

terraform validate
Plan the deployment:

terraform plan
Deploy the pod:

terraform apply -auto-approve
List the Pods:

kubectl get pods
Reset the environment:

terraform destroy -auto-approve


----------------------------------------------------------------
----------------------------------------------------------------


master $ terraform init

Initializing provider plugins...
- Checking for available provider plugins on https://releases.hashicorp.com...
- Downloading plugin for provider "kubernetes" (1.10.0)...

Terraform has been successfully initialized!

master $ terraform validate
master $

master $ terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  + kubernetes_pod.ghost_alpine
      id:                                          <computed>
      metadata.#:                                  "1"
      metadata.0.generation:                       <computed>
      metadata.0.name:                             "ghost-alpine"
      metadata.0.namespace:                        "default"
      metadata.0.resource_version:                 <computed>
      metadata.0.self_link:                        <computed>
      metadata.0.uid:                              <computed>
      spec.#:                                      "1"
      spec.0.automount_service_account_token:      "false"
      spec.0.container.#:                          "1"
      spec.0.container.0.image:                    "ghost:alpine"
      spec.0.container.0.image_pull_policy:        <computed>
      spec.0.container.0.name:                     "ghost-alpine"
      spec.0.container.0.resources.#:              <computed>
      spec.0.container.0.stdin:                    "false"
      spec.0.container.0.stdin_once:               "false"
      spec.0.container.0.termination_message_path: "/dev/termination-log"
      spec.0.container.0.tty:                      "false"
      spec.0.container.0.volume_mount.#:           <computed>
      spec.0.dns_policy:                           "ClusterFirst"
      spec.0.host_ipc:                             "false"
      spec.0.host_network:                         "true"
      spec.0.host_pid:                             "false"
      spec.0.hostname:                             <computed>
      spec.0.image_pull_secrets.#:                 <computed>
      spec.0.node_name:                            <computed>
      spec.0.restart_policy:                       "Always"
      spec.0.service_account_name:                 <computed>
      spec.0.share_process_namespace:              "false"
      spec.0.termination_grace_period_seconds:     "30"
      spec.0.volume.#:                             <computed>


Plan: 1 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

master $ terraform apply -auto-approve
kubernetes_pod.ghost_alpine: Creating...
  metadata.#:                                  "" => "1"
  metadata.0.generation:                       "" => "<computed>"
  metadata.0.name:                             "" => "ghost-alpine"
  metadata.0.namespace:                        "" => "default"
  metadata.0.resource_version:                 "" => "<computed>"
  metadata.0.self_link:                        "" => "<computed>"
  metadata.0.uid:                              "" => "<computed>"
  spec.#:                                      "" => "1"
  spec.0.automount_service_account_token:      "" => "false"
  spec.0.container.#:                          "" => "1"
  spec.0.container.0.image:                    "" => "ghost:alpine"
  spec.0.container.0.image_pull_policy:        "" => "<computed>"
  spec.0.container.0.name:                     "" => "ghost-alpine"
  spec.0.container.0.resources.#:              "" => "<computed>"
  spec.0.container.0.stdin:                    "" => "false"
  spec.0.container.0.stdin_once:               "" => "false"
  spec.0.container.0.termination_message_path: "" => "/dev/termination-log"
  spec.0.container.0.tty:                      "" => "false"
  spec.0.container.0.volume_mount.#:           "" => "<computed>"
  spec.0.dns_policy:                           "" => "ClusterFirst"
  spec.0.host_ipc:                             "" => "false"
  spec.0.host_network:                         "" => "true"
  spec.0.host_pid:                             "" => "false"
  spec.0.hostname:                             "" => "<computed>"
  spec.0.image_pull_secrets.#:                 "" => "<computed>"
  spec.0.node_name:                            "" => "<computed>"
  spec.0.restart_policy:                       "" => "Always"
  spec.0.service_account_name:                 "" => "<computed>"
  spec.0.share_process_namespace:              "" => "false"
  spec.0.termination_grace_period_seconds:     "" => "30"
  spec.0.volume.#:                             "" => "<computed>"
kubernetes_pod.ghost_alpine: Still creating... (10s elapsed)
kubernetes_pod.ghost_alpine: Still creating... (20s elapsed)
kubernetes_pod.ghost_alpine: Still creating... (30s elapsed)
kubernetes_pod.ghost_alpine: Still creating... (40s elapsed)
kubernetes_pod.ghost_alpine: Still creating... (50s elapsed)
kubernetes_pod.ghost_alpine: Still creating... (1m0s elapsed)
kubernetes_pod.ghost_alpine: Still creating... (1m10s elapsed)
kubernetes_pod.ghost_alpine: Still creating... (1m20s elapsed)

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

master $ kubectl get pods
NAME           READY   STATUS    RESTARTS   AGE
ghost-alpine   1/1     Running   0          5m29s

master $ terraform destroy -auto-approve
kubernetes_pod.ghost_alpine: Refreshing state... (ID: default/ghost-alpine)
kubernetes_pod.ghost_alpine: Destroying... (ID: default/ghost-alpine)
kubernetes_pod.ghost_alpine: Destruction complete after 4s

Destroy complete! Resources: 1 destroyed.

master $ kubectl get pods
No resources found.
master $