In this lesson, we will take the Jenkins image we built in the previous lesson, and deploy a Docker container using Terraform.

Edit main.tf:

vi main.tf
main.tf contents:

# Jenkins Volume
resource "docker_volume" "jenkins_volume" {
  name = "jenkins_data"
}

# Start the Jenkins Container
resource "docker_container" "jenkins_container" {
  name  = "jenkins"
  image = "jenkins:terraform"
  ports {
    internal = "8080"
    external = "8080"
  }

  volumes {
    volume_name    = "${docker_volume.jenkins_volume.name}"
    container_path = "/var/jenkins_home"
  }

  volumes {
    host_path      = "/var/run/docker.sock"
    container_path = "/var/run/docker.sock"
  }
}
Initialize Terraform:

terraform init
Plan the deployment:

terraform plan -out=tfplan
Deploy Jenkins:

terraform apply tfplan
Get the Admin password:

docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

Why we are creating volumes.we can directly run the image itself ?


[ec2-user@ip-172-31-91-83 jenkins]$ terraform init

Terraform has been successfully initialized!

[ec2-user@ip-172-31-91-83 jenkins]$ terraform validate
Success! The configuration is valid.

[ec2-user@ip-172-31-91-83 jenkins]$ terraform plan -out=tfplan

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.jenkins_container will be created
  + resource "docker_container" "jenkins_container" {
      + attach           = false
      + bridge           = (known after apply)
      + container_logs   = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + id               = (known after apply)
      + image            = "jenkins:terraform"
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "jenkins"
      + network_data     = (known after apply)
      + read_only        = false
      + restart          = "no"
      + rm               = false
      + start            = true

      + ports {
          + external = 8080
          + internal = 8080
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }

      + volumes {
          + container_path = "/var/jenkins_home"
          + volume_name    = "jenkins_data"
        }
      + volumes {
          + container_path = "/var/run/docker.sock"
          + host_path      = "/var/run/docker.sock"
        }
    }

  # docker_volume.jenkins_volume will be created
  + resource "docker_volume" "jenkins_volume" {
      + driver     = (known after apply)
      + id         = (known after apply)
      + mountpoint = (known after apply)
      + name       = "jenkins_data"
    }

Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

[ec2-user@ip-172-31-91-83 jenkins]$ terraform apply tfplan
docker_volume.jenkins_volume: Creating...
docker_volume.jenkins_volume: Creation complete after 0s [id=jenkins_data]
docker_container.jenkins_container: Creating...
docker_container.jenkins_container: Creation complete after 0s [id=e8d0c4cae5157611703bb4d8ac8597a8e3390f7a46446e7eb6d7b6658d994db1]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

[ec2-user@ip-172-31-91-83 jenkins]$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
e8d0c4cae515        jenkins:terraform   "/sbin/tini -- /usr/…"   21 seconds ago      Up 19 seconds       0.0.0.0:8080->8080/tcp, 50000/tcp   jenkins
[ec2-user@ip-172-31-91-83 jenkins]$ docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword
18f4237270ab441b800f35ff36283f33
[ec2-user@ip-172-31-91-83 jenkins]$



