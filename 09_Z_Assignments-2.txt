Create a new Terraform file called main.tf.
Create three variables.
The first variable, called image_name, needs to be set to ghost:latest.
The second variable is called container_name with a default of ghost_blog.
The final variable is called ext_port and set the default to port 80.

Create a Docker image resource called ghost_image that uses the image_name variable.

Create a Docker container resource called ghost_container.
The name will use the container_name variable.
The image will use the ghost_image resource.
The internal port will be set to 2368.
The external port will use ext_port variable.

Initialize Terraform.

Create a Terraform plan that uses the following variables:

container_name = ghost_blog1
image_name = ghost:alpine
ext_port = 8080
Output the plan to a file called tfplan.

Then apply the plan using tfplan and make sure that the apply doesn’t prompt for input.


------------------------------------------------------------
------------------------------------------------------------

$ vi main.tf
resource "docker_image" "ghost_image" {
  name = "${var.image_name}"
}
resource "docker_container" "ghost_container" {
  name = "${var.container_name}"
  image = "${docker_image.ghost_image.latest}"
  ports {
    external = "${var.ext_port}"
    internal = "2368"

  }

}

$ vi image_name.tf
variable "image_name" {
  description = "name of the image"
  default = "ghost:latest"
}

vi container_name.tf
variable "container_name" {
  description = "name of the container"
  default = "ghost_blog"
}

$ vi ext_port.tf
variable "ext_port" {
  description = "external port"
  default = "80"
}

 > terraform validate
 >

terraform plan -var 'container_name=ghost_blog1' -var 'image_name=ghost:alpine' -var 'ext_port=8097' -out=tfplan

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but
will not be persisted to local or remote state storage.


The Terraform execution plan has been generated and is shown below.
Resources are shown in alphabetical order for quick scanning. Green resources
will be created (or destroyed and then created if an existing resource
exists), yellow resources are being changed in-place, and red resources
will be destroyed. Cyan entries are data sources to be read.

Your plan was also saved to the path below. Call the "apply" subcommand
with this plan file and Terraform will exactly execute this execution
plan.

Path: tfplan

+ docker_container.ghost_container
    bridge:                    "<computed>"
    gateway:                   "<computed>"
    image:                     "${docker_image.ghost_image.latest}"
    ip_address:                "<computed>"
    ip_prefix_length:          "<computed>"
    log_driver:                "json-file"
    must_run:                  "true"
    name:                      "ghost_blog1"
    ports.#:                   "1"
    ports.2028505576.external: "8097"
    ports.2028505576.internal: "2368"
    ports.2028505576.ip:       ""
    ports.2028505576.protocol: "tcp"
    restart:                   "no"

+ docker_image.ghost_image
    latest: "<computed>"
    name:   "ghost:alpine"


Plan: 2 to add, 0 to change, 0 to destroy.

> terraform apply tfplan
docker_image.ghost_image: Creating...
  latest: "" => "<computed>"
  name:   "" => "ghost:alpine"
docker_image.ghost_image: Still creating... (10s elapsed)
docker_image.ghost_image: Still creating... (20s elapsed)
docker_image.ghost_image: Still creating... (30s elapsed)
docker_image.ghost_image: Still creating... (40s elapsed)
docker_image.ghost_image: Still creating... (50s elapsed)
docker_image.ghost_image: Still creating... (1m0s elapsed)
docker_image.ghost_image: Still creating... (1m10s elapsed)
docker_image.ghost_image: Still creating... (1m20s elapsed)
docker_image.ghost_image: Still creating... (1m30s elapsed)

docker_image.ghost_image: Creation complete
docker_container.ghost_container: Creating...
  bridge:                    "" => "<computed>"
  gateway:                   "" => "<computed>"
  image:                     "" => "sha256:7a562dfa21a3d6aa7e2ad74d1301b849c5ab13504df6607682f1ea2831626583"
  ip_address:                "" => "<computed>"
  ip_prefix_length:          "" => "<computed>"
  log_driver:                "" => "json-file"
  must_run:                  "" => "true"
  name:                      "" => "ghost_blog1"
  ports.#:                   "" => "1"
  ports.2028505576.external: "" => "8097"
  ports.2028505576.internal: "" => "2368"
  ports.2028505576.ip:       "" => ""
  ports.2028505576.protocol: "" => "tcp"
  restart:                   "" => "no"
docker_container.ghost_container: Creation complete

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate


  > docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ghost               alpine              7a562dfa21a3        4 days ago          327 MB
redis               latest              4760dc956b2d        21 months ago       107 MB
ubuntu              latest              f975c5035748        21 months ago       112 MB
alpine              latest              3fd9065eaf02        23 months ago       4.14 MB

 > docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                  NAMES
671c0a14a2d8        7a562dfa21a3        "docker-entrypoint..."   About a minute ago   Up About a minute   0.0.0.0:8097->2368/tcp   ghost_blog1
